apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    run: db
spec:
  ports:
  - port: 5432
    name: db
  selector:
    run: db
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-mobility
  labels:
    run: db
spec:
  selector:
    matchLabels:
      run: db
  serviceName: "db"
  template:
    metadata:
      generateName: db-mobility
      labels:
        run: db
    spec:
      # se elimina el directorio para que no interfiera con postgresql
      initContainers:
      - name: "remove-lost-found"
        image: "busybox"
        imagePullPolicy: "IfNotPresent"
        command:  ["rm", "-fr", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
      # initContainers:
      # - name: load-postrgesql
      #   image: busybox
      #   command:
      #     - /bin/sh
      #     - -c
      #     - |
      #       wget -qO- https://github.com/Martin-Ruggeri-Ing/datakube/archive/refs/heads/main.zip | busybox unzip - -d /
      #     - cat mobility-postgre | kubectl exec -it pods/db-mobility-0 -- psql -h localhost -U postgres -d mobility
      #   volumeMounts:
      #   - name: postgresql-data
      #     mountPath: /var/lib/postgresql/data
      containers:
        - name: db-mobility
          image: postgres:latest
          imagePullPolicy: Always
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: db-name
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: db-password
          ports:
            - name: db
              containerPort: 5432
          volumeMounts:
            #Cualquier archivo SQL o script colocado en este directorio se ejecutará automáticamente cuando el contenedor se inicie por primera vez.
            #Esto es útil para inicializar la base de datos con un esquema o datos predeterminados.
            - mountPath: "/docker-entrypoint-initdb.d/"
              name: sql-schema-data
            #El volumen montado aquí asegura que los datos sean persistentes entre reinicios o recreaciones del pod.
            - mountPath: "/var/lib/postgresql/data"
              name: postgresql-data
      volumes:
        - name: secret-volume
          secret:
            secretName: db-secret
        - name: sql-schema-data 
          configMap: 
            name: db-schema-data
  volumeClaimTemplates:
   - metadata:
       name: postgresql-data
     spec:
       accessModes: [ "ReadWriteOnce" ]
       resources:
         requests:
           storage: 1Gi